{"ast":null,"code":"var _jsxFileName = \"/home/ueslei/Documentos/GitHub/testefrontamai/src/pages/Radio/Radio.js\";\nimport React, { Component, audio, useRef } from 'react';\nimport som from \"../../Audio/audio.mp3\";\nimport son from \"../../Audio/audio1.mp3\";\nconst data = [{\n  imgSrc: 'turk1.png',\n  audioSrc: som\n}, {\n  imgSrc: 'turk2.png',\n  audioSrc: son\n}, {\n  imgSrc: 'turk3.png',\n  audioSrc: som\n}, {\n  imgSrc: 'turk4.png',\n  audioSrc: son\n}];\nexport default class Turkish extends Component {\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"ol\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 11\n      }\n    }, data.map(({\n      imgSrc,\n      audioSrc\n    }) => /*#__PURE__*/React.createElement(MediaComponent, {\n      imgSrc: imgSrc,\n      audioSrc: audioSrc,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 15\n      }\n    }))));\n  }\n\n}\n\nconst AudioPlayer = ({\n  imgSrc,\n  audioSrc\n}) => {\n  const [status, setStatus] = useState({\n    isPlaying: false,\n    isLoop: false,\n    isLoaded: false,\n    error: false,\n    ...others\n  });\n  const audioRef = useRef(null);\n\n  const toggleAudio = () => status.isLoaded ? status.isPlaying ? audioRef.current.pause() : audioRef.current.play() : console.log(\"Audio has not loaded yet.\");\n\n  return /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: imgSrc,\n    onClick: toggleAudio,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"audio\", {\n    ref: audioRef,\n    src: audioSrc,\n    onLoad: () => setStatus({ ...status,\n      isLoaded: true\n    }),\n    onPlay: () => setStatus({ ...status,\n      isPlaying: true\n    }),\n    onPause: () => setStatus({ ...status,\n      isPlaying: false\n    }),\n    onError: () => setStatus({ ...status,\n      error: true\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }));\n};","map":{"version":3,"sources":["/home/ueslei/Documentos/GitHub/testefrontamai/src/pages/Radio/Radio.js"],"names":["React","Component","audio","useRef","som","son","data","imgSrc","audioSrc","Turkish","render","map","AudioPlayer","status","setStatus","useState","isPlaying","isLoop","isLoaded","error","others","audioRef","toggleAudio","current","pause","play","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA0BC,KAA1B,EAAgCC,MAAhC,QAA8C,OAA9C;AAEA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,OAAOC,GAAP,MAAgB,wBAAhB;AAEA,MAAMC,IAAI,GAAG,CACT;AAAEC,EAAAA,MAAM,EAAE,WAAV;AAAuBC,EAAAA,QAAQ,EAAEJ;AAAjC,CADS,EAET;AAAEG,EAAAA,MAAM,EAAE,WAAV;AAAuBC,EAAAA,QAAQ,EAAEH;AAAjC,CAFS,EAGT;AAAEE,EAAAA,MAAM,EAAE,WAAV;AAAuBC,EAAAA,QAAQ,EAAEJ;AAAjC,CAHS,EAIT;AAAEG,EAAAA,MAAM,EAAE,WAAV;AAAuBC,EAAAA,QAAQ,EAAEH;AAAjC,CAJS,CAAb;AAOE,eAAe,MAAMI,OAAN,SAAsBR,SAAtB,CAAgC;AAC7CS,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGJ,IAAI,CAACK,GAAL,CAAS,CAAC;AAAEJ,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAD,kBACR,oBAAC,cAAD;AAAgB,MAAA,MAAM,EAAED,MAAxB;AAAgC,MAAA,QAAQ,EAAEC,QAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADH,CADF,CADF;AASD;;AAX4C;;AAc/C,MAAMI,WAAW,GAAG,CAAC;AAAEL,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAD,KAA0B;AAC5C,QAAM,CAACK,MAAD,EAASC,SAAT,IAAsBC,QAAQ,CAAC;AACnCC,IAAAA,SAAS,EAAE,KADwB;AAEnCC,IAAAA,MAAM,EAAE,KAF2B;AAGnCC,IAAAA,QAAQ,EAAE,KAHyB;AAInCC,IAAAA,KAAK,EAAE,KAJ4B;AAKnC,OAAGC;AALgC,GAAD,CAApC;AAOA,QAAMC,QAAQ,GAAGlB,MAAM,CAAC,IAAD,CAAvB;;AAEA,QAAMmB,WAAW,GAAG,MAClBT,MAAM,CAACK,QAAP,GACIL,MAAM,CAACG,SAAP,GACEK,QAAQ,CAACE,OAAT,CAAiBC,KAAjB,EADF,GAEEH,QAAQ,CAACE,OAAT,CAAiBE,IAAjB,EAHN,GAIIC,OAAO,CAACC,GAAR,CAAY,2BAAZ,CALN;;AAOA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,GAAG,EAAEpB,MAAV;AAAkB,IAAA,OAAO,EAAEe,WAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AACE,IAAA,GAAG,EAAED,QADP;AAEE,IAAA,GAAG,EAAEb,QAFP;AAGE,IAAA,MAAM,EAAE,MAAMM,SAAS,CAAC,EAAE,GAAGD,MAAL;AAAaK,MAAAA,QAAQ,EAAE;AAAvB,KAAD,CAHzB;AAIE,IAAA,MAAM,EAAE,MAAMJ,SAAS,CAAC,EAAE,GAAGD,MAAL;AAAaG,MAAAA,SAAS,EAAE;AAAxB,KAAD,CAJzB;AAKE,IAAA,OAAO,EAAE,MAAMF,SAAS,CAAC,EAAE,GAAGD,MAAL;AAAaG,MAAAA,SAAS,EAAE;AAAxB,KAAD,CAL1B;AAME,IAAA,OAAO,EAAE,MAAMF,SAAS,CAAC,EAAE,GAAGD,MAAL;AAAaM,MAAAA,KAAK,EAAE;AAApB,KAAD,CAN1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAaD,CA9BD","sourcesContent":["import React, { Component,audio,useRef } from 'react';\n\nimport som from \"../../Audio/audio.mp3\";\nimport son from \"../../Audio/audio1.mp3\";\n\nconst data = [\n    { imgSrc: 'turk1.png', audioSrc: som },\n    { imgSrc: 'turk2.png', audioSrc: son },\n    { imgSrc: 'turk3.png', audioSrc: som },\n    { imgSrc: 'turk4.png', audioSrc: son },\n  ];\n\n  export default class Turkish extends Component {\n    render() {\n      return (\n        <div>\n          <ol>\n            {data.map(({ imgSrc, audioSrc }) => (\n              <MediaComponent imgSrc={imgSrc} audioSrc={audioSrc} />\n            ))}\n          </ol>\n        </div>\n      );\n    }\n  }\n  \n  const AudioPlayer = ({ imgSrc, audioSrc }) => {\n    const [status, setStatus] = useState({\n      isPlaying: false,\n      isLoop: false,\n      isLoaded: false,\n      error: false,\n      ...others,\n    });\n    const audioRef = useRef(null);\n  \n    const toggleAudio = () =>\n      status.isLoaded\n        ? status.isPlaying\n          ? audioRef.current.pause()\n          : audioRef.current.play()\n        : console.log(\"Audio has not loaded yet.\");\n  \n    return (\n      <li>\n        <img src={imgSrc} onClick={toggleAudio} />\n        <audio\n          ref={audioRef}\n          src={audioSrc}\n          onLoad={() => setStatus({ ...status, isLoaded: true })}\n          onPlay={() => setStatus({ ...status, isPlaying: true })}\n          onPause={() => setStatus({ ...status, isPlaying: false })}\n          onError={() => setStatus({ ...status, error: true })}\n        />\n      </li>\n    );\n  };"]},"metadata":{},"sourceType":"module"}