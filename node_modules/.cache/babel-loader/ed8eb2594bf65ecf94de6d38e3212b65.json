{"ast":null,"code":"var _jsxFileName = \"/media/ueslei/8c30fe4f-7d20-4ae9-ab32-8dd7ef60dcdf/home/jumf/GitKraken/testefrontamai/src/components/player/index.js\";\nimport * as C from './styles';\nimport { Play, Pause, SkipBack, SkipForward, RandomMusicsTrue, RandomMusicsFalse, VolumeOff, VolumeOn } from '../../svgs';\nimport { musics } from '../../data/data';\nimport { useEffect, useRef, useState } from 'react';\nexport const Player = ({\n  id,\n  setId,\n  setIsFull,\n  isFull,\n  windowWidth\n}) => {\n  const [isPlaying, setIsPlaying] = useState < boolean > true;\n  const [volume, setVolume] = useState < string > '1';\n  const [duration, setDuration] = useState < number > 0;\n  const [isRandom, setIsRandom] = useState < boolean > false;\n  const [currentTime, setCurrentTime] = useState < number > 0;\n  const [isMuted, setIsMuted] = useState < boolean > false;\n  const audioTag = useRef(null);\n  const progressBar = useRef(null);\n  const animationRef = useRef(null);\n  useEffect(() => {\n    if (id !== '') {\n      if (isPlaying) {\n        audioTag.current.play();\n        animationRef.current = requestAnimationFrame(whilePlaying);\n        audioTag.current.volume = volume;\n\n        if (isMuted) {\n          audioTag.current.muted = true;\n        } else audioTag.current.muted = false;\n\n        const interval = setInterval(() => {\n          const seconds = Math.floor(audioTag.current.duration);\n          setDuration(seconds);\n          if (windowWidth >= 830 || isFull) progressBar.current.max = seconds;\n        }, 1000);\n        setInterval(() => {\n          if (duration > 0 || duration !== undefined) {\n            clearInterval(interval);\n\n            if (audioTag.current.currentTime === audioTag.current.duration) {\n              isRandom ? skipRandom() : skipForward();\n            }\n          }\n        }, 1100);\n      } else {\n        audioTag.current.pause();\n        audioTag.current.volume = volume;\n        cancelAnimationFrame(animationRef.current);\n      }\n    }\n  }, [[], isRandom]);\n\n  const calculateDuration = sec => {\n    const minutes = Math.floor(sec / 60);\n    const newMinutes = minutes < 10 ? `0${minutes}` : `${minutes}`;\n    const seconds = Math.floor(sec % 60);\n    const newSeconds = seconds < 10 ? `0${seconds}` : `${seconds}`;\n    return `${newMinutes}:${newSeconds}`;\n  };\n\n  const skipForward = () => {\n    if (id === '') {\n      alert('Choose a song!');\n    } else if (isRandom) {\n      skipRandom();\n    } else if (id === '9') {\n      setId('1');\n    } else {\n      const idNum = parseInt(id);\n      const newId = idNum + 1;\n      setId(newId.toString());\n    }\n  };\n\n  const skipRandom = () => {\n    const idNum = parseInt(id);\n    const randomNum = Math.floor(Math.random() * 9);\n\n    if (randomNum === 0 || randomNum === idNum) {\n      const newNum = randomNum + 1;\n      setId(newNum.toString());\n    } else {\n      setId(randomNum.toString());\n    }\n  };\n\n  const skipBack = () => {\n    if (id === '') {\n      alert('Choose a song!');\n    } else {\n      const idNum = parseInt(id);\n      const newId = idNum - 1;\n      setId(newId.toString());\n    }\n  };\n\n  const whilePlaying = () => {\n    if (windowWidth >= 830 || isFull) {\n      var _audioTag$current;\n\n      progressBar.current.value = audioTag === null || audioTag === void 0 ? void 0 : (_audioTag$current = audioTag.current) === null || _audioTag$current === void 0 ? void 0 : _audioTag$current.currentTime;\n      animationRef.current = requestAnimationFrame(whilePlaying);\n      changeCurrentTime();\n    }\n  };\n\n  const changeRange = () => {\n    if (windowWidth >= 830 || isFull) {\n      audioTag.current.currentTime = progressBar.current.value;\n      changeCurrentTime();\n    }\n  };\n\n  const changeCurrentTime = () => {\n    setCurrentTime(progressBar.current.value);\n  };\n\n  return /*#__PURE__*/React.createElement(C.Container, {\n    isFull: isFull,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"musicDiv\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }, musics.map(music => id === music.id ? /*#__PURE__*/React.createElement(\"div\", {\n    onClick: () => setIsFull(windowWidth <= 820 && !isFull),\n    className: \"music\",\n    key: music.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 29\n    }\n  }, !isFull ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"img\", {\n    src: music.album_img,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 37\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 41\n    }\n  }, music.name), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 41\n    }\n  }, music.author))) : '', /*#__PURE__*/React.createElement(\"audio\", {\n    src: music.audio,\n    ref: audioTag,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 33\n    }\n  })) : '')), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"player\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"inputButtons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 17\n    }\n  }, isFull || windowWidth >= 830 ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progressBar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"PcurrentTime\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 29\n    }\n  }, calculateDuration(currentTime)), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"range\",\n    className: \"currentProgress\",\n    defaultValue: \"0\",\n    ref: progressBar,\n    onChange: changeRange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"Pduration\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 29\n    }\n  }, duration && !isNaN(duration) && calculateDuration(duration))) : '', /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 21\n    }\n  }, windowWidth >= 830 || isFull ? /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setIsRandom(!isRandom),\n    className: \"randomMusicsButton\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 25\n    }\n  }, isRandom ? /*#__PURE__*/React.createElement(RandomMusicsTrue, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 41\n    }\n  }) : /*#__PURE__*/React.createElement(RandomMusicsFalse, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 64\n    }\n  })) : '', /*#__PURE__*/React.createElement(\"button\", {\n    onClick: skipBack,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(SkipBack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"playPause\",\n    onClick: () => setIsPlaying(!isPlaying),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 25\n    }\n  }, isPlaying ? /*#__PURE__*/React.createElement(Pause, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 47\n    }\n  }) : /*#__PURE__*/React.createElement(Play, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 59\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: skipForward,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(SkipForward, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 29\n    }\n  }))))), windowWidth > 825 && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"test\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"volumeButton\",\n    onClick: () => setIsMuted(!isMuted),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 17\n    }\n  }, isMuted ? /*#__PURE__*/React.createElement(VolumeOff, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 32\n    }\n  }) : /*#__PURE__*/React.createElement(VolumeOn, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 47\n    }\n  })), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"range\",\n    step: \"0.01\",\n    onChange: e => setVolume(e.target.value),\n    value: volume,\n    max: \"1\",\n    min: \"0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 17\n    }\n  })));\n};","map":{"version":3,"sources":["/media/ueslei/8c30fe4f-7d20-4ae9-ab32-8dd7ef60dcdf/home/jumf/GitKraken/testefrontamai/src/components/player/index.js"],"names":["C","Play","Pause","SkipBack","SkipForward","RandomMusicsTrue","RandomMusicsFalse","VolumeOff","VolumeOn","musics","useEffect","useRef","useState","Player","id","setId","setIsFull","isFull","windowWidth","isPlaying","setIsPlaying","boolean","volume","setVolume","string","duration","setDuration","number","isRandom","setIsRandom","currentTime","setCurrentTime","isMuted","setIsMuted","audioTag","progressBar","animationRef","current","play","requestAnimationFrame","whilePlaying","muted","interval","setInterval","seconds","Math","floor","max","undefined","clearInterval","skipRandom","skipForward","pause","cancelAnimationFrame","calculateDuration","sec","minutes","newMinutes","newSeconds","alert","idNum","parseInt","newId","toString","randomNum","random","newNum","skipBack","value","changeCurrentTime","changeRange","map","music","album_img","name","author","audio","isNaN","e","target"],"mappings":"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","sourcesContent":["import * as C from './styles';\nimport { Play, Pause, SkipBack, SkipForward, RandomMusicsTrue, RandomMusicsFalse, VolumeOff, VolumeOn } from '../../svgs';\nimport { musics } from '../../data/data';\nimport { useEffect, useRef, useState } from 'react';\n\ntype Props = {\n    id: string;\n    isFull: boolean;\n    setId: (e: string) => void;\n    setIsFull: (e: boolean) => void;\n    windowWidth: number;\n}\n\nexport const Player = ({ id, setId, setIsFull, isFull, windowWidth }: Props) => {\n    const [isPlaying, setIsPlaying] = useState<boolean>(true)\n    const [volume, setVolume] = useState<string>('1')\n    const [duration, setDuration] = useState<number>(0)\n    const [isRandom, setIsRandom] = useState<boolean>(false)\n    const [currentTime, setCurrentTime] = useState<number>(0)\n    const [isMuted, setIsMuted] = useState<boolean>(false)\n\n    const audioTag = useRef(null)\n    const progressBar = useRef(null)\n    const animationRef = useRef(null)\n\n    useEffect(() => {\n        if (id !== '') {\n            if (isPlaying) {             \n                audioTag.current.play()              \n                animationRef.current = requestAnimationFrame(whilePlaying)               \n                audioTag.current.volume = volume \n\n                if (isMuted) {                    \n                    audioTag.current.muted = true\n\n                } else audioTag.current.muted = false\n\n                const interval = setInterval(() => {                    \n                    const seconds = Math.floor(audioTag.current.duration)\n                    setDuration(seconds)                                     \n                    if(windowWidth >= 830 || isFull) progressBar.current.max = seconds                    \n                }, 1000)\n\n                setInterval(() => {\n                    if (duration > 0 || duration !== undefined) {\n                        clearInterval(interval)\n                            \n                        if (audioTag.current.currentTime === audioTag.current.duration) {\n                                isRandom ? skipRandom() : skipForward()\n                         \n                            }\n                    }\n                }, 1100)\n\n            } else {               \n                audioTag.current.pause()                \n                audioTag.current.volume = volume                \n                cancelAnimationFrame(animationRef.current)\n            }\n        }\n    }, [[], isRandom])\n   \n    const calculateDuration = (sec: number) => {\n        const minutes = Math.floor(sec / 60)\n        const newMinutes = minutes < 10 ? `0${minutes}` : `${minutes}`\n        const seconds = Math.floor(sec % 60)\n        const newSeconds = seconds < 10 ? `0${seconds}` : `${seconds}`\n\n        return `${newMinutes}:${newSeconds}`\n    }   \n\n    const skipForward = () => {\n        if (id === '') {\n            alert('Choose a song!')        \n        } else if (isRandom) {\n            skipRandom()        \n        } else if (id === '9') {\n            setId('1')\n        } else {\n            const idNum = parseInt(id);\n            const newId = idNum + 1;\n            setId(newId.toString())\n        }\n    }\n\n    const skipRandom = () => {\n        const idNum = parseInt(id)\n        const randomNum = Math.floor(Math.random() * 9)\n        if (randomNum === 0 || randomNum === idNum) {\n            const newNum = randomNum + 1 \n            setId(newNum.toString())\n        } else {\n            setId(randomNum.toString())\n        }\n    }\n\n    const skipBack = () => {\n        if (id === '') {\n            alert('Choose a song!')        \n        } else {\n            const idNum = parseInt(id);\n            const newId = idNum - 1;\n            setId(newId.toString())\n        }\n    }\n\n    const whilePlaying = () => {\n        if (windowWidth >= 830 || isFull) {\n            progressBar.current.value = audioTag?.current?.currentTime\n            animationRef.current = requestAnimationFrame(whilePlaying)\n            changeCurrentTime()\n        }\n    }\n\n    const changeRange = () => {\n        if (windowWidth >= 830 || isFull) {\n            audioTag.current.currentTime = progressBar.current.value\n            changeCurrentTime()\n        }\n    }\n    \n    const changeCurrentTime = () => {\n        setCurrentTime(progressBar.current.value)\n    }\n    \n    return (\n        <C.Container isFull={isFull}>\n            \n            <div className='musicDiv'>\n                \n                   {musics.map(music => (\n                        \n                        id === music.id ?\n                        \n                            <div \n                            onClick={() => setIsFull(windowWidth <= 820 && !isFull)} className='music' key={music.id}>\n                                {!isFull ? \n                                <>\n                                    <img src={music.album_img} />\n                                    <div>\n                                        <h1>{music.name}</h1>\n                                        <h3>{music.author}</h3>\n                                    </div>\n                                </> \n                                : ''\n                                }\n                                <audio src={music.audio} ref={audioTag}/>\n                            </div>                         \n                    : ''\n                    ))\n                }\n            </div>\n            <div className='player'>\n                <div className='inputButtons'>\n                    { isFull || windowWidth >= 830 ? \n                        <div className='progressBar'>\n                            <p className='PcurrentTime'>\n                                {calculateDuration(currentTime)}\n                            </p>\n                            <input \n                                type=\"range\" \n                                className='currentProgress'\n                                defaultValue='0' \n                                ref={progressBar} \n                                onChange={changeRange}\n                            />\n                            \n                            <p className='Pduration'>\n                                {(duration && !isNaN(duration)) && \n                                calculateDuration(duration)}\n                            </p>\n                        </div> \n                        : ''\n                    }\n                    <div className='buttons'>\n                        { windowWidth >= 830 || isFull ? \n                        <button \n                            onClick={() => setIsRandom(!isRandom)} className='randomMusicsButton'>\n                            {isRandom ? <RandomMusicsTrue /> : <RandomMusicsFalse />}\n                        </button> \n                        : ''\n                        }\n                        <button onClick={skipBack}>\n                            <SkipBack />\n                        </button>\n                        <button \n                            className='playPause' \n                            onClick={() => setIsPlaying(!isPlaying)}>\n                                {isPlaying ?  <Pause /> : <Play />}\n                        </button>\n                        <button onClick={skipForward}>\n                            <SkipForward />\n                        </button>\n                        \n                    </div>\n                </div>\n            </div>\n\n            { windowWidth > 825 && \n                <div className='test'>\n                <button \n                    className='volumeButton' \n                    onClick={() => setIsMuted(!isMuted)}>\n                    {isMuted ? <VolumeOff/> : <VolumeOn />}\n                </button>\n                <input\n                    type=\"range\" \n                    step=\"0.01\"\n                    onChange={(e) => setVolume(e.target.value)} \n                    value={volume}\n                    max='1'\n                    min='0' \n                />\n                </div>\n            }\n        </C.Container>\n    )\n}"]},"metadata":{},"sourceType":"module"}